<?xml version="1.0" encoding="UTF-8"?>
<modification>
    <name>Mass Product Editing</name>
    <version>3.0.1</version>
    <code>f27e2480a833939e475051828d087c39ee9f332d</code>
    <link>http://madebybenjamin.com</link>
    <author>Benjamin Verkleij</author>
    
    
    <file path="admin/language/english/catalog/product.php">
        <operation error="log" info="Add language strings to language file">
            <search position="after"><![CDATA[<?php]]></search>
            <add>
                <![CDATA[
                $_['text_choose_action']            = 'Choose Action';
                $_['text_mass_activate']            = 'Activate';
                $_['text_mass_deactivate']          = 'De-Activate';
                $_['text_mass_attach_category']     = 'Attach to Category';
                $_['text_mass_detach_category']     = 'Detach from Category';
                $_['text_mass_attach_category_and_activate']        = 'Attach to Category and Activate';
                $_['text_mass_detach_category_and_deactivate']      = 'Detach from Category and De-Activate';
                $_['text_mass_attach_filter']           = 'Attach to Filter';
                $_['text_mass_detach_filter']           = 'Detach from Filter';
                $_['text_mass_attach_manufacturer']     = 'Attach to Manufacturer';
                $_['text_mass_detach_manufacturer']     = 'Detach from Manufacturer';
                $_['text_select_a_category']    = 'Select a Category';
                $_['text_select_a_filter']      = 'Select a Filter';
                $_['text_select_a_brand']       = 'Select a Manufacturer';
                $_['text_set_new_price']        = 'Set a new price';
                $_['text_add_amount_to_price']  = 'Add a fixed amount to price';
                $_['text_subtract_amount_from_price']  = 'Subtract a fixed amount from price';
                $_['text_subtract_percentage_from_price']  = 'Subtract a percentage from price';
                $_['text_add_percentage_to_price']  = 'Add a percentage to price';
                $_['text_subtract_quantity']    = 'Subtract from stock quantity';
                $_['text_add_quantity']         = 'Add to stock quantity';
                $_['text_set_quantity']         = 'Set stock quantity';
                $_['text_set_fixed_special']	= 'Set a fixed special price';
                $_['text_remove_special_price'] = 'Remove special prices';
                $_['text_customer_groups']		= 'Customer Groups:';
                $_['text_create_special_from_regular_price'] = 'Create a special from discounting % of off the regular price';
                $_['text_create_special_subtract_amount_price'] = 'Create a special from subtracting a fixed amount from regular price';
                $_['button_process']            = 'Process';
                $_['entry_percentage']			= 'Percentage';
                
                $_['text_head_misc']	= '# -- MISC. -- #';
                $_['text_head_attach']	= '# -- ATTACHING -- #';
                $_['text_head_price']	= '# -- PRICE -- #';
                $_['text_head_special']	= '# -- SPECIAL PRICES -- #';
                $_['text_head_stock']	= '# -- STOCK KEEPING -- #';
                
                $_['entry_date_start']			= 'Start Date';
                $_['entry_date_end']			= 'End Date';
                
                ]]>
            </add>
        </operation>
    </file>


    <file path="admin/controller/catalog/product.php">
        <operation error="logo" info="Add language string to method, load some models, and get filters, categories and manufacturers">
            <search position="before"><![CDATA[$data['products'] = array();]]></search>
            <add><![CDATA[

                        $data['massActivateAction'] = $this->url->link('catalog/product/massActivate&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massDeActivateAction'] = $this->url->link('catalog/product/massDeActivate&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massAttachCategoryAction'] = $this->url->link('catalog/product/massAttachCategory&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massDetachCategoryAction'] = $this->url->link('catalog/product/massDetachCategory&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massAttachFilterAction'] = $this->url->link('catalog/product/massAttachFilter&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massDetachFilterAction'] = $this->url->link('catalog/product/massDetachFilter&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massAttachManufacturerAction'] = $this->url->link('catalog/product/massAttachManufacturer&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massDetachManufacturerAction'] = $this->url->link('catalog/product/massDetachManufacturer&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massAttachCategoryAndActivateAction'] = $this->url->link('catalog/product/massAttachCategoryAndActivate&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massDetachCategoryAndDeactivateAction'] = $this->url->link('catalog/product/massDetachCategoryAndDeactivate&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massSetNewPriceAction'] = $this->url->link('catalog/product/massSetNewPrice&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massAddAmountToPriceAction'] = $this->url->link('catalog/product/massAddAmountToPrice&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massSubtractAmountFromPriceAction'] = $this->url->link('catalog/product/massSubtractAmountFromPrice&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massAddPercentageToPriceAction'] = $this->url->link('catalog/product/massAddPercentageToPrice&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massSubtractPercentageFromPriceAction'] = $this->url->link('catalog/product/massSubtractPercentageFromPrice&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massSetQuantityAction'] = $this->url->link('catalog/product/massSetQuantity&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massAddQuantityAction'] = $this->url->link('catalog/product/massAddQuantity&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massSubtractQuantityAction'] = $this->url->link('catalog/product/massSubtractQuantity&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massDelete'] = $this->url->link('catalog/product/delete&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massCopy'] = $this->url->link('catalog/product/copy&token=' . $this->session->data['token'], $url, 'SSL');
                        
                        $data['massCreateSpecialFromRegular'] = $this->url->link('catalog/product/massCreateSpecialFromRegular&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massSetFixedSpecialAction'] = $this->url->link('catalog/product/massSetFixedSpecialAction&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massRemoveSpecialPriceAction']  = $this->url->link('catalog/product/massRemoveSpecialPriceAction&token=' . $this->session->data['token'],  $url, 'SSL');
                        $data['massCreateSpecialSubtractAmount']  = $this->url->link('catalog/product/massCreateSpecialSubtractAmount&token=' . $this->session->data['token'],  $url, 'SSL');

                        $data['text_choose_action'] = $this->language->get('text_choose_action');
                        $data['text_mass_activate'] = $this->language->get('text_mass_activate');
                        $data['text_mass_deactivate'] = $this->language->get('text_mass_deactivate');
                        $data['text_mass_attach_category'] = $this->language->get('text_mass_attach_category');
                        $data['text_mass_detach_category'] = $this->language->get('text_mass_detach_category');
                        $data['text_mass_attach_category_and_activate'] = $this->language->get('text_mass_attach_category_and_activate');
                        $data['text_mass_detach_category_and_deactivate'] = $this->language->get('text_mass_detach_category_and_deactivate');
                        $data['text_mass_attach_filter'] = $this->language->get('text_mass_attach_filter');
                        $data['text_mass_detach_filter'] = $this->language->get('text_mass_detach_filter');
                        $data['text_mass_attach_manufacturer'] = $this->language->get('text_mass_attach_manufacturer');
                        $data['text_mass_detach_manufacturer'] = $this->language->get('text_mass_detach_manufacturer');
                        $data['text_select_a_category'] = $this->language->get('text_select_a_category');
                        $data['text_select_a_filter'] = $this->language->get('text_select_a_filter');
                        $data['text_select_a_brand'] = $this->language->get('text_select_a_brand');
                        $data['text_set_new_price'] = $this->language->get('text_set_new_price');
                        $data['text_add_amount_to_price'] = $this->language->get('text_add_amount_to_price');
                        $data['text_subtract_amount_from_price'] = $this->language->get('text_subtract_amount_from_price');
                        $data['text_add_percentage_to_price'] = $this->language->get('text_add_percentage_to_price');
                        $data['text_subtract_percentage_from_price'] = $this->language->get('text_subtract_percentage_from_price');
                        $data['text_set_quantity'] = $this->language->get('text_set_quantity');
                        $data['text_add_quantity'] = $this->language->get('text_add_quantity');
                        $data['text_subtract_quantity'] = $this->language->get('text_subtract_quantity');
                        $data['button_process'] = $this->language->get('button_process');
                        $data['text_customer_groups'] = $this->language->get('text_customer_groups');
                        $data['entry_date_start'] = $this->language->get('entry_date_start');
                        $data['entry_date_end'] = $this->language->get('entry_date_end');
                        
                        $data['text_set_fixed_special'] = $this->language->get('text_set_fixed_special');
                        $data['text_remove_special_price'] = $this->language->get('text_remove_special_price');
                        $data['text_create_special_from_regular_price'] = $this->language->get('text_create_special_from_regular_price');
                        $data['text_create_special_subtract_amount_price'] = $this->language->get('text_create_special_subtract_amount_price');
                        
                        $data['text_head_misc'] = $this->language->get('text_head_misc');
                        $data['text_head_attach'] = $this->language->get('text_head_attach');
                        $data['text_head_price'] = $this->language->get('text_head_price');
                        $data['text_head_special'] = $this->language->get('text_head_special');
                        $data['text_head_stock'] = $this->language->get('text_head_stock');
                        
                        $data['entry_percentage'] = $this->language->get('entry_percentage');

                        $emptyAr = array();
                        $this->load->model('catalog/category');
                        $data['categories'] = $this->model_catalog_category->getCategories($emptyAr);

                        $this->load->model('catalog/filter');
                        $data['filters'] = $this->model_catalog_filter->getFilters($emptyAr);

                        $this->load->model('catalog/manufacturer');
                        $data['manufacturers'] = $this->model_catalog_manufacturer->getManufacturers($emptyAr);
                        
                        $this->load->model('customer/customer_group');
						$data['customer_groups'] = $this->model_customer_customer_group->getCustomerGroups();

            ]]>
            </add>

        </operation>
        <operation error="log" info="Add new controller methods">
            <search position="after"><![CDATA[private $error = array();]]></search>
            <add><![CDATA[

                  public function massActivate() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                    if(isset($this->request->post['selected'])) {
                        foreach ($this->request->post['selected'] as $product_id) {
                            $this->model_catalog_mass_edit->activateProduct($product_id);
                        }
                        $this->session->data['success'] = $this->language->get('success_activate');
                    }  else {
	                    $this->error['warning'] = $this->language->get('error_no_products_selected');
                    }
                }

				return $this->index();
            }


            public function massDeActivate() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                    if(isset($this->request->post['selected'])) {
                        foreach ($this->request->post['selected'] as $product_id) {
                            $this->model_catalog_mass_edit->deActivateProduct($product_id);
                        }
                        $this->session->data['success'] = $this->language->get('success_deactivate');
                    } else {
	                    $this->error['warning'] = $this->language->get('error_no_products_selected');
                    }
                }

                return $this->index();
            }


            public function massAttachCategoryAndActivate() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!$this->request->post['category_id']) {
		                $this->error['warning'] = $this->language->get('error_no_category_selected');
		                return $this->index();
	                }

                    foreach($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->activateProduct($product_id);
                        $this->model_catalog_mass_edit->attachCategory($product_id, $this->request->post['category_id']);
                    }

                    $this->session->data['success'] = $this->language->get('success_massAttachCategoryAndActivate');
                   
                }

                return $this->index();
            }


            public function massAttachFilter() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!$this->request->post['filter_id']) {
		                $this->error['warning'] = $this->language->get('error_no_filter_selected');
		                return $this->index();
	                }
                    
                    foreach($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->attachFilter($product_id, $this->request->post['filter_id']);
                    }

                    $this->session->data['success'] = $this->language->get('success_massAttachFilter');
                  
                }

                return $this->index();
            }


            public function massDetachFilter() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {

                    if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!$this->request->post['filter_id']) {
		                $this->error['warning'] = $this->language->get('error_no_filter_selected');
		                return $this->index();
	                }

                    foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->detachFilter($product_id, $this->request->post['filter_id']);
                    }

                    $this->session->data['success'] = $this->language->get('success_massDetachFilter');                   

                }
                
                return $this->index();
            }


            public function massAttachManufacturer() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if (!$this->request->post['manufacturer_id']) {
		                $this->error['warning'] = $this->language->get('error_no_manufacturer_selected');
		                return $this->index();
		            }
                    
                    foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->attachManufacturer($product_id, $this->request->post['manufacturer_id']);
                    }

                    $this->session->data['success'] = $this->language->get('success_massAttachManufacturer');
                    

                }

                return $this->index();
            }

            public function massDetachManufacturer() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if (!$this->request->post['manufacturer_id']) {
		                $this->error['warning'] = $this->language->get('error_no_manufacturer_selected');
		                return $this->index();
		            }

                    foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->detachManufacturer($product_id);
                    }

                    $this->session->data['success'] = $this->language->get('success_massDetachManufacturer');
                   
                }
                
                return $this->index();
            }
            
            

            public function massAttachCategory() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');
                
                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                
                	if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!$this->request->post['category_id']) {
		                $this->error['warning'] = $this->language->get('error_no_category_selected');
		                return $this->index();
	                }
	                
                    foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->attachCategory($product_id, $this->request->post['category_id']);
                    }
                    
                    $this->session->data['success'] = $this->language->get('success_massAttachCategory');
                       
                }
                
                return $this->index();
            }
            

            public function massDetachCategory() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!$this->request->post['category_id']) {
		                $this->error['warning'] = $this->language->get('error_no_category_selected');
		                return $this->index();
	                }

                    foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->detachCategory($product_id, $this->request->post['category_id']);
                    }
                    $this->session->data['success'] = $this->language->get('success_massDetachCategory');
                }
               
				return $this->index();
            }
            

            public function massDetachCategoryAndDeactivate() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

              
                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!$this->request->post['category_id']) {
		                $this->error['warning'] = $this->language->get('error_no_category_selected');
		                return $this->index();
	                }

                    foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->deActivateProduct($product_id);
                        $this->model_catalog_mass_edit->detachCategory($product_id, $this->request->post['category_id']);
                    }
                    
                    $this->session->data['success'] = $this->language->get('success_massDetachCategoryAndDeactivate');
                }
				
				return $this->index();
            }
            
             
            public function massSetFixedSpecialAction()
            {
	           $this->load->model('catalog/mass_edit');
               $this->load->language('catalog/mass_edit'); 
               
                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['price'])) {
		                $this->error['warning'] = $this->language->get('error_no_price_set');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['customer_groups'])) {
		                $this->error['warning'] = $this->language->get('error_no_customer_groups_selected');
		                return $this->index();
	                }
                  
	                $customer_groups = explode(',', $this->request->post['customer_groups']);
					$price = $this->request->post['price'];
					$priority = 1;
					$date_start = $this->request->post['date_start'];
					$date_end = $this->request->post['date_end'];
						
                    foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->setSpecialPrice($product_id, $price, $customer_groups , $priority, $date_start, $date_end);
                        
                    }

                    $this->session->data['success'] = $this->language->get('success_massSetFixedSpecial');
                }
                
				return $this->index();
            }
            
            
            
            public function massCreateSpecialFromRegular() {

                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                    
                    if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['percentage'])) {
		                $this->error['warning'] = $this->language->get('error_no_percentage_set');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['customer_groups'])) {
		                $this->error['warning'] = $this->language->get('error_no_customer_groups_selected');
		                return $this->index();
	                }
	                     
	                $customer_groups = explode(',', $this->request->post['customer_groups']);
					(float)$percentage = $this->request->post['percentage'];
					$priority = 1;
					$date_start = $this->request->post['date_start'];
					$date_end = $this->request->post['date_end'];

                    foreach ($this->request->post['selected'] as $product_id) {
                        	                       
                        $product = $this->model_catalog_product->getProduct($product_id);
                        
                        $newPrice = (float)$product['price'] * ((100-$percentage) / 100);

                        $this->model_catalog_mass_edit->setSpecialPrice($product_id, $newPrice, $customer_groups , $priority, $date_start, $date_end);
                    }

                    $this->session->data['success'] = $this->language->get('success_massCreateSpecialFromPrice');
                     
                }

                return $this->index();
            }
            
            
            public function massCreateSpecialSubtractAmount() {

                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                    
                    if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['price'])) {
		                $this->error['warning'] = $this->language->get('error_no_price_set');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['customer_groups'])) {
		                $this->error['warning'] = $this->language->get('error_no_customer_groups_selected');
		                return $this->index();
	                }
	                     
	                     
                    $customer_groups = explode(',', $this->request->post['customer_groups']);
					$priority = 1;
					$date_start = $this->request->post['date_start'];
					$date_end = $this->request->post['date_end'];


                    foreach ($this->request->post['selected'] as $product_id) {
                        $product = $this->model_catalog_product->getProduct($product_id);
                        $newPrice = (float)$product['price'] - (float)$this->request->post['price'];
                        if($newPrice > 0.00) {
                        	$this->model_catalog_mass_edit->setSpecialPrice($product_id, $newPrice, $customer_groups, $priority, $date_start, $date_end);
                        }
                    }

                    $this->session->data['success'] = $this->language->get('success_massCreateSpecialFromPriceAmount');
                    
                }

                return $this->index();
            }
            
            
            public function massRemoveSpecialPriceAction() {
	        	$this->load->model('catalog/mass_edit');
				$this->load->language('catalog/mass_edit'); 
               
                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
					if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['customer_groups'])) {
		                $this->error['warning'] = $this->language->get('error_no_customer_groups_selected');
		                return $this->index();
	                }
	               
					$customer_groups = explode(',', $this->request->post['customer_groups']);
					foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->removeSpecialPrice($product_id, $customer_groups); 
                    }
		           	
		           	$this->session->data['success'] = $this->language->get('success_massRemoveSpecialPrice');
                }
                
                return $this->index();
            }
            

            public function massSetNewPrice() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['price'])) {
		                $this->error['warning'] = $this->language->get('error_no_price_set');
		                return $this->index();
	                }
	                
	                foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->setNewPrice($product_id, $this->request->post['price']);
                    }

                    $this->session->data['success'] = $this->language->get('success_massSetNewPrice');
                }

                return $this->index();
            }


            public function massAddAmountToPrice() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                    if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['price'])) {
		                $this->error['warning'] = $this->language->get('error_no_price_set');
		                return $this->index();
	                }

                    foreach ($this->request->post['selected'] as $product_id) {
                        $product = $this->model_catalog_product->getProduct($product_id);
                        $newPrice = (float)$this->request->post['price'] + (float)$product['price'];
                        $this->model_catalog_mass_edit->setNewPrice($product_id, $newPrice);
                    }

                    $this->session->data['success'] = $this->language->get('success_massAddAmountToPrice');                      
                }

                return $this->index();
            }


            public function massSubtractAmountFromPrice() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                    if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['price'])) {
		                $this->error['warning'] = $this->language->get('error_no_price_set');
		                return $this->index();
	                }

                    foreach ($this->request->post['selected'] as $product_id) {

                        $product = $this->model_catalog_product->getProduct($product_id);
                        $newPrice = (float)$product['price'] - (float)$this->request->post['price'];
                        if($newPrice > 0.00) {
                            $this->model_catalog_mass_edit->setNewPrice($product_id, $newPrice);
                        }
                    }

                    $this->session->data['success'] = $this->language->get('success_massSubtractAmountFromPrice'); 
                }

				return $this->index();
            }


            public function massAddPercentageToPrice() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['percentage'])) {
		                $this->error['warning'] = $this->language->get('error_no_percentage_set');
		                return $this->index();
	                }
	                
                    foreach ($this->request->post['selected'] as $product_id) {
                        $product = $this->model_catalog_product->getProduct($product_id);
                        (float)$percentage = $this->request->post['percentage'];
                        $newPrice = (float)$product['price'] * (1 + ($percentage / 100));
                        $this->model_catalog_mass_edit->setNewPrice($product_id, $newPrice);
                    }

                    $this->session->data['success'] = $this->language->get('success_massAddPercentageToPrice');
                }

                return $this->index();
            }
            

            public function massSubtractPercentageFromPrice() {

                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if (($this->request->server['REQUEST_METHOD'] == 'POST')) {
                    if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['percentage'])) {
		                $this->error['warning'] = $this->language->get('error_no_percentage_set');
		                return $this->index();
	                }

                    foreach ($this->request->post['selected'] as $product_id) {
                        $product = $this->model_catalog_product->getProduct($product_id);
                        (float)$percentage = $this->request->post['percentage'];
                        $newPrice = (float)$product['price'] * ((100-$percentage) / 100);
                        $this->model_catalog_mass_edit->setNewPrice($product_id, $newPrice);
                    }

                    $this->session->data['success'] = $this->language->get('success_massAddPercentageToPrice');
                }

				return $this->index();
            }


            public function massSetQuantity() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
	                if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['quantity'])) {
		                $this->error['warning'] = $this->language->get('error_no_quantity_set');
		                return $this->index();
	                }
	                                     
                    foreach ($this->request->post['selected'] as $product_id) {
                        $this->model_catalog_mass_edit->setQuantity($product_id, $this->request->post['quantity']);
                    }

                    $this->session->data['success'] = $this->language->get('success_massSetQuantity');
                   
                }

                return $this->index();
            }


            public function massAddQuantity() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                    if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['quantity'])) {
		                $this->error['warning'] = $this->language->get('error_no_quantity_set');
		                return $this->index();
	                }
	                
                    foreach ($this->request->post['selected'] as $product_id) {

                        $product = $this->model_catalog_product->getProduct($product_id);
                        $newQuantity = (int)$this->request->post['quantity'] + (int)$product['quantity'];

                        $this->model_catalog_mass_edit->setQuantity($product_id, $newQuantity);
                    }

                    $this->session->data['success'] = $this->language->get('success_massAddToQuantity');
                   
                }

				return $this->index();
            }


            public function massSubtractQuantity() {
                $this->load->model('catalog/mass_edit');
                $this->load->language('catalog/mass_edit');

                if ($this->request->server['REQUEST_METHOD'] == 'POST') {
                    if(!isset($this->request->post['selected'])) {
		                $this->error['warning'] = $this->language->get('error_no_products_selected');
		                return $this->index();
	                }
	                
	                if(!isset($this->request->post['quantity'])) {
		                $this->error['warning'] = $this->language->get('error_no_quantity_set');
		                return $this->index();
	                }

                    foreach ($this->request->post['selected'] as $product_id) {

                        $product = $this->model_catalog_product->getProduct($product_id);
                        $newQuantity = (int)$product['quantity'] - (int)$this->request->post['quantity'];
                        $this->model_catalog_mass_edit->setQuantity($product_id, $newQuantity);
                    }

                    $this->session->data['success'] = $this->language->get('success_massSubtractFromQuantity');
                  
                }

				return $this->index();
            }


            ]]></add>


        </operation>
    </file>


    <file path="admin/view/template/catalog/product_list.tpl">
        <operation error="logo" info="Add Select fields in buttons div">
            <search position="before"><![CDATA[<form action="<?php echo $delete; ?>" method="post" enctype="multipart/form-data" id="form-product">]]></search>
            <add><![CDATA[
                <div class="well form-inline">

                    <select id="massAction" name="massAction" class="form-control" style="margin-right:5px;">
                      <option value="">-- <?php echo $text_choose_action; ?> --</option>
                      
                      <option value=""><?php echo $text_head_misc; ?></option>
                      <option value="delete"><?php echo $button_delete; ?></option>
                      <option value="copy"><?php echo $button_copy; ?></option>
                      <option value="activate"><?php echo $text_mass_activate; ?></option>
                      <option value="deActivate"><?php echo $text_mass_deactivate; ?></option>
                      <option value="massAttachCategoryAndActivate"><?php echo $text_mass_attach_category_and_activate; ?></option>
                      <option value="massDetachCategoryAndDeactivate"><?php echo $text_mass_detach_category_and_deactivate; ?></option>
                      
                      <option value=""><?php echo $text_head_attach; ?></option>
                      <option value="massAttachCategory"><?php echo $text_mass_attach_category; ?></option>
                      <option value="massDetachCategory"><?php echo $text_mass_detach_category; ?></option>
                      <option value="massAttachFilter"><?php echo $text_mass_attach_filter; ?></option>
                      <option value="massDetachFilter"><?php echo $text_mass_detach_filter; ?></option>
                      <option value="massAttachManufacturer"><?php echo $text_mass_attach_manufacturer; ?></option>
                      <option value="massDetachManufacturer"><?php echo $text_mass_detach_manufacturer; ?></option>
                      
                      <option value=""><?php echo $text_head_price; ?></option>
                      <option value="massSetNewPrice"><?php echo $text_set_new_price; ?></option>
                      <option value="massAddAmountToPrice"><?php echo $text_add_amount_to_price; ?></option>
                      <option value="massSubtractAmountFromPrice"><?php echo $text_subtract_amount_from_price; ?></option>
                      <option value="massAddPercentageToPrice"><?php echo $text_add_percentage_to_price; ?></option>
                      <option value="massSubtractPercentageFromPrice"><?php echo $text_subtract_percentage_from_price; ?></option>
                      
                      <option value=""><?php echo $text_head_stock; ?></option>
                      <option value="massSetQuantity"><?php echo $text_set_quantity; ?></option>
                      <option value="massAddQuantity"><?php echo $text_add_quantity; ?></option>
                      <option value="massSubtractQuantity"><?php echo $text_subtract_quantity; ?></option>
                     
                      <option value=""><?php echo $text_head_special; ?></option>
                      <option value="massCreateSpecialFromRegular"><?php echo $text_create_special_from_regular_price; ?></option>
                      <option value="massCreateSpecialSubtractAmount"><?php echo $text_create_special_subtract_amount_price; ?></option>
					  <option value="massSetFixedSpecialAction"><?php echo $text_set_fixed_special; ?></option>
					  <option value="massRemoveSpecialPriceAction"><?php echo $text_remove_special_price; ?></option>
					 
                  </select>

                  <select id="categoryList" name="categoryList" class="form-control" style="margin-right:5px;">
                      <option value="">-- <?php echo $text_select_a_category;?> --</option>
                      <?php foreach($categories as $category) { ?>
                      <option value="<?php echo $category['category_id']; ?>"><?php echo $category['name']; ?></option>
                      <?php } ?>
                  </select>

                  <select id="filterList" name="filterList" class="form-control" style="margin-right:5px;">
                      <option value="">-- <?php echo $text_select_a_filter; ?> --</option>
                      <?php foreach($filters as $filter) { ?>
                      <option value="<?php echo $filter['filter_id']; ?>"><?php echo $filter['name']; ?></option>
                      <?php } ?>
                  </select>

                  <select id="manufacturerList" name="manufacturerList" class="form-control" style="margin-right:5px;">
                      <option value="">-- <?php echo $text_select_a_brand; ?> --</option>
                      <?php foreach($manufacturers as $manufacturer) { ?>
                      <option value="<?php echo $manufacturer['manufacturer_id']; ?>"><?php echo $manufacturer['name']; ?></option>
                      <?php } ?>
                  </select>

                  <input name="set_price" class="form-control" id="set_price" style="margin-right:5px;" type="text" placeholder="<?php echo $entry_price; ?>"/>
                  
                  <input name="set_percentage" class="form-control" id="set_percentage" style="margin-right:5px;" type="text" placeholder="<?php echo $entry_percentage; ?>"/>

                  <input name="set_quantity" class="form-control" id="set_quantity" style="margin-right:5px;" type="text" placeholder="<?php echo $entry_quantity; ?>"/>
                  
                  
				  
				  
				<div class="input-group date_start start_date_field">
					<input type="text" name="date_start_option" id="date_start_option" placeholder="<?php echo $entry_date_start; ?>" data-date-format="YYYY-MM-DD" class="form-control" />
					<span class="input-group-btn"><button class="btn btn-default" type="button"><i class="fa fa-calendar"></i></button></span>
				</div>
				<div class="input-group date_end  end_date_field">
				    <input type="text" name="date_end_option" id="date_end_option" placeholder="<?php echo $entry_date_end; ?>" data-date-format="YYYY-MM-DD" class="form-control" />
				    <span class="input-group-btn"><button class="btn btn-default" type="button"><i class="fa fa-calendar"></i></button></span>
				</div>
				
				<div class="customer_group_selection form-group">
              		<div class="well-sm well">
	              		<strong><?php echo $text_customer_groups;?></strong><br/>
		              	<?php foreach($customer_groups as $customer_group) { ?>
		              		<input type="checkbox" class="group_checkbox" value="<?php echo $customer_group['customer_group_id']; ?>"/> <?php echo $customer_group['name']; ?><br/>
		              	<?php } ?>
				  	</div>
			  </div>


                    <a onclick="$('form').submit();" class="btn btn-primary button"><?php echo $button_process;?></a>
                </div>

            ]]>
            </add>
        </operation>

        <operation info="Add hidden fields to form">
            <search position="after"><![CDATA[
            <form action="<?php echo $delete; ?>" method="post" enctype="multipart/form-data" id="form-product">
            ]]></search>
            <add><![CDATA[
                <input type="hidden" name="category_id" value=""/>
                <input type="hidden" name="filter_id" value=""/>
                <input type="hidden" name="manufacturer_id" value=""/>
                <input type="hidden" name="price" value=""/>
                <input type="hidden" name="percentage" value=""/>
                <input type="hidden" name="quantity" value=""/>
                <input type="hidden" name="customer_groups" value=""/>
                <input type="hidden" name="date_start" value=""/>
                <input type="hidden" name="date_end" value=""/>
            ]]></add>
        </operation>

        <operation info="Add scripts to template">
            <search position="before"><![CDATA[
            <?php echo $footer; ?>
            ]]></search>
            <add><![CDATA[

            <script>
              $(document).ready(function() {
	              
	              // Datepicker
	              $('.date_start, .date_end').datetimepicker({
						pickTime: false,
						format: 'YYYY-MM-DD'
					});
	
                  // Empty default action
                  $('#form-product').attr('action', '');
                  $('#categoryList').hide();
                  $('#filterList').hide();
                  $('#manufacturerList').hide();
                  $('input#set_price').hide();
                  $('input#set_percentage').hide();
                  $('input#set_quantity').hide();
                  $('.customer_group_selection').hide();
                  $('.start_date_field, .end_date_field').hide();

                  $('select#massAction').on('change', function() {
                      if(this.value == 'delete')
                      {
                          $('#form-product').attr('action', '<?php echo $massDelete; ?>');
                      }
                      else if(this.value == 'copy')
                      {
                          $('#form-product').attr('action', '<?php echo $massCopy; ?>');
                      }
                      else if(this.value == 'activate')
                      {
                          $('#form-product').attr('action', '<?php echo $massActivateAction; ?>');
                      }
                      else if(this.value == 'deActivate')
                      {
                          $('#form-product').attr('action', '<?php echo $massDeActivateAction; ?>');
                      }
                      else if(this.value == 'massAttachCategory')
                      {
                          $('#form-product').attr('action', '<?php echo $massAttachCategoryAction; ?>');
                          $('#categoryList').show('');
                      }
                      else if(this.value == 'massDetachCategory')
                      {
                          $('#form-product').attr('action', '<?php echo $massDetachCategoryAction; ?>');
                          $('#categoryList').show('');
                      }
                      else if(this.value == 'massAttachCategoryAndActivate')
                      {
                          $('#form-product').attr('action', '<?php echo $massAttachCategoryAndActivateAction; ?>');
                          $('#categoryList').show('');
                      }
                      else if(this.value == 'massDetachCategoryAndDeactivate')
                      {
                          $('#form-product').attr('action', '<?php echo $massDetachCategoryAndDeactivateAction; ?>');
                          $('#categoryList').show('');
                      }
                      else if(this.value == 'massAttachFilter')
                      {
                          $('#form-product').attr('action', '<?php echo $massAttachFilterAction; ?>');
                          $('#filterList').show('');
                      }
                      else if(this.value == 'massDetachFilter')
                      {
                          $('#form-product').attr('action', '<?php echo $massDetachFilterAction; ?>');
                          $('#filterList').show('');
                      }
                      else if(this.value == 'massAttachManufacturer')
                      {
                          $('#form-product').attr('action', '<?php echo $massAttachManufacturerAction; ?>');
                          $('#manufacturerList').show('');
                      }
                      else if(this.value == 'massDetachManufacturer')
                      {
                          $('#form-product').attr('action', '<?php echo $massDetachManufacturerAction; ?>');
                      }

                      else if(this.value == 'massSetNewPrice')
                      {
                          $('#form-product').attr('action', '<?php echo $massSetNewPriceAction; ?>');
                          $('input#set_price').show('');
                      }

                      else if(this.value == 'massAddAmountToPrice')
                      {
                          $('#form-product').attr('action', '<?php echo $massAddAmountToPriceAction; ?>');
                          $('input#set_price').show('');
                      }

                      else if(this.value == 'massSubtractAmountFromPrice')
                      {
                          $('#form-product').attr('action', '<?php echo $massSubtractAmountFromPriceAction; ?>');
                          $('input#set_price').show('');
                      }

                      else if(this.value == 'massAddPercentageToPrice')
                      {
                          $('#form-product').attr('action', '<?php echo $massAddPercentageToPriceAction; ?>');
                          $('input#set_percentage').show('');
                      }

                      else if(this.value == 'massSubtractPercentageFromPrice')
                      {
                          $('#form-product').attr('action', '<?php echo $massSubtractPercentageFromPriceAction; ?>');
                          $('input#set_percentage').show('');
                      }
                      
                      else if(this.value == 'massSetFixedSpecialAction')
                      {
                          $('#form-product').attr('action', '<?php echo $massSetFixedSpecialAction; ?>');
                          $('input#set_price').show('');
                          $('.customer_group_selection').show();
                          $('.start_date_field, .end_date_field').show();
                      }
                      
                      else if(this.value == 'massCreateSpecialFromRegular')
                      {
                          $('#form-product').attr('action', '<?php echo $massCreateSpecialFromRegular; ?>');
                          $('input#set_percentage').show('');
                          $('.customer_group_selection').show();
                          $('.start_date_field, .end_date_field').show();
                      }
                      
                      else if(this.value == 'massCreateSpecialSubtractAmount')
                      {
                          $('#form-product').attr('action', '<?php echo $massCreateSpecialSubtractAmount; ?>');
                          $('input#set_price').show('');
                          $('.customer_group_selection').show();
                          $('.start_date_field, .end_date_field').show();
                      }
                      
                      else if(this.value == 'massRemoveSpecialPriceAction')
                      {
                          $('#form-product').attr('action', '<?php echo $massRemoveSpecialPriceAction; ?>');
                          $('.customer_group_selection').show();
                      }

                      else if(this.value == 'massSetQuantity')
                      {
                          $('#form-product').attr('action', '<?php echo $massSetQuantityAction; ?>');
                          $('input#set_quantity').show('');
                      }

                      else if(this.value == 'massAddQuantity')
                      {
                          $('#form-product').attr('action', '<?php echo $massAddQuantityAction; ?>');
                          $('input#set_quantity').show('');
                      }

                      else if(this.value == 'massSubtractQuantity')
                      {
                          $('#form-product').attr('action', '<?php echo $massSubtractQuantityAction; ?>');
                          $('input#set_quantity').show('');
                      }

                      if(this.value != 'massAttachCategoryAndActivate' && this.value != 'massAttachCategory' && this.value != 'massDetachCategory' && this.value != 'massDetachCategoryAndDeactivate') {
                          $('#categoryList').hide('');
                      }

                      if(this.value != 'massAttachFilter' && this.value != 'massDetachFilter') {
                          $('#filterList').hide('');
                      }

                      if(this.value != 'massAttachManufacturer') {
                          $('#manufacturerList').hide('');
                      }

					  // Hide price field
                      if(this.value != 'massSetNewPrice' && this.value != 'massAddAmountToPrice' && this.value != 'massSubtractAmountFromPrice' && this.value != 'massSetFixedSpecialAction' && this.value != 'massCreateSpecialSubtractAmount') {
                          $('input#set_price').hide('');
                          $("input[name='price']").val();
                      }

					  // Hide quantity field
                      if(this.value != 'massSetQuantity' && this.value != 'massAddQuantity' && this.value != 'massSubtractQuantity') {
                          $('input#set_quantity').hide('');
                          $("input[name='quantity']").val();
                      }
                      
                      // Hide percentage field
                      if(this.value != 'massCreateSpecialFromRegular' && this.value != 'massSubtractPercentageFromPrice' && this.value != 'massAddPercentageToPrice') {
                      		$('input#set_percentage').hide('');
					  		$("input[name='percentage']").val();
                      }
                      
                      // Hide date fields
                      if(this.value != 'massCreateSpecialFromRegular' && this.value != 'massSetFixedSpecialAction' && this.value != 'massCreateSpecialSubtractAmount') {
	                      $('.start_date_field, .end_date_field').hide();
                      }
                      
                      // Hide customer group fields
                      if(this.value != 'massCreateSpecialFromRegular' && this.value != 'massSetFixedSpecialAction' && this.value != 'massRemoveSpecialPriceAction' && this.value != 'massCreateSpecialSubtractAmount') {
	                      $('.customer_group_selection').hide();
                      }

                      
                  });

				  // Change values for input on change
                  $('select#categoryList').on('change', function() {
                      $("input[name='category_id']").val(this.value);
                  });

                  $('select#filterList').on('change', function() {
                      $("input[name='filter_id']").val(this.value);
                  });

                  $('select#manufacturerList').on('change', function() {
                      $("input[name='manufacturer_id']").val(this.value);
                  });

                  $('input#set_price').on('change', function() {
                      $("input[name='price']").val(this.value);
                  });
                  
                  $('input#set_percentage').on('change', function() {
                      $("input[name='percentage']").val(this.value);
                  });

                  $('input#set_quantity').on('change', function() {
                      $("input[name='quantity']").val(this.value);
                  });
                  
                   $('.group_checkbox:checkbox').change(function() {
	                  var checks = $('.group_checkbox:checked').map(function() {
	                  	return this.value;
	                  	}).get().join(',');
	                  	
	                  $("input[name='customer_groups']").val(checks);
                  });
                  
                  
                  $(".date_start").on('dp.change', function(e) {
	                  	$("input[name='date_start']").val(e.date.format('YYYY-MM-DD'));
                  });
$(".date_end").on('dp.change', function(e) {
	                  	$("input[name='date_end']").val(e.date.format('YYYY-MM-DD'));
                  });

                  
              });
          </script>

            ]]></add>
        </operation>


    </file>

 </modification>
